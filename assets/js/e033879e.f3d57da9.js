"use strict";(self.webpackChunkyoyoyojoe_github_io=self.webpackChunkyoyoyojoe_github_io||[]).push([[7042],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),m=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),d=o,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return n?i.createElement(g,r(r({ref:t},p),{},{components:n})):i.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var m=2;m<a;m++)r[m]=n[m];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var i=n(7462),o=(n(7294),n(4137));const a={},r="Git Fabulous",s={unversionedId:"git",id:"git",title:"Git Fabulous",description:"Git Process",source:"@site/docs/git.md",sourceDirName:".",slug:"/git",permalink:"/docs/git",draft:!1,editUrl:"https://github.com/yoyoyojoe/yoyoyojoe.github.io/tree/main/docs/git.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Firebase",permalink:"/docs/gcp/firebase"},next:{title:"Homebrew",permalink:"/docs/homebrew"}},l={},m=[{value:"Git Process",id:"git-process",level:2},{value:"<code>git checkout [&lt;branch&gt;]</code>",id:"git-checkout-branch",level:3},{value:"Basics",id:"basics",level:2},{value:"Git setup",id:"git-setup",level:2},{value:"Git started",id:"git-started",level:2},{value:"Git Tricky",id:"git-tricky",level:2},{value:"Additional Resources",id:"additional-resources",level:2}],p={toc:m};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"git-fabulous"},"Git Fabulous"),(0,o.kt)("h2",{id:"git-process"},"Git Process"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git checkout -b <your_branch>")," to update files in the working tree to match the version in the index or the specified tree."),(0,o.kt)("p",null,"::: notes:"),(0,o.kt)("h3",{id:"git-checkout-branch"},(0,o.kt)("inlineCode",{parentName:"h3"},"git checkout [<branch>]")),(0,o.kt)("p",null,"To prepare for working on ",(0,o.kt)("inlineCode",{parentName:"p"},"<branch>"),", switch to it by updating the index and the files in the working tree, and by pointing ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," at the branch. Local modifications to the files in the working tree are kept, so that they can be committed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<branch>"),"."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"<branch>")," is not found but there does exist a tracking branch in exactly one remote (call it ",(0,o.kt)("inlineCode",{parentName:"p"},"<remote>"),") with a matching name and --no-guess is not specified, treat as equivalent to"),(0,o.kt)("p",null,"Specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"-b")," causes a new branch to be created as if ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-branch"},(0,o.kt)("inlineCode",{parentName:"a"},"git branch"))," were called and then checked out.\n:::"),(0,o.kt)("h2",{id:"basics"},"Basics"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git clone <YOUR_FORKED_REPO_URL>")," to clone your forked repo onto your local machine. A nickname ",(0,o.kt)("inlineCode",{parentName:"p"},"origin")," is used by default as your local repo name."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git add")," to stage your files."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git commit")," to commit your staged files."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git push")," to push your committed staged files to the cloud (e.g., GitHub for most)."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git remote add <REPOSITORY_NICKNAME> <REMOTE_REPO_URL>")," to add your remote repository with your repo name and remote url entered. ",(0,o.kt)("inlineCode",{parentName:"p"},"git clone")," essentially did this ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-clone"},"+ ",(0,o.kt)("inlineCode",{parentName:"a"},"git fetch")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"git pull")),"."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git remote -v")," to check your current remote setup."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git status")," to check your git status."),(0,o.kt)("h2",{id:"git-setup"},"Git setup"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"if you had forked my GitHub repo ",(0,o.kt)("inlineCode",{parentName:"li"},"press-play"),", and you do everything on the ",(0,o.kt)("inlineCode",{parentName:"li"},"dev")," branch and use ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," only for deployment.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/<YOUR_GITHUB_USERNAME>/press-play.git # please replace <YOUR_GITHUB_USERNAME>\n\n$ git remote -v\norigin  https://github.com/<YOUR_GITHUB_USERNAME>/press-play.git (fetch)\norigin  https://github.com/<YOUR_GITHUB_USERNAME>/press-play.git (push)\n\n$ git remote add upstream https://github.com/yoyoyojoe/press-play.git # note the nickname upstream and the web URL being where you forked the repo from\n\n$ git remote -v\norigin  https://github.com/<YOUR_GITHUB_USERNAME>/press-play.git (fetch)\norigin  https://github.com/<YOUR_GITHUB_USERNAME>/press-play.git (push)\nupstream https://github.com/yoyoyojoe/press-play.git\nupstream https://github.com/yoyoyojoe/press-play.git\n\n")),(0,o.kt)("h2",{id:"git-started"},"Git started"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"your ",(0,o.kt)("inlineCode",{parentName:"li"},"git.md")," file is in your ",(0,o.kt)("inlineCode",{parentName:"li"},"docs")," directory")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ git status # let\'s check the git status of our files                                                                                                                                                                            \nOn branch main\nYour branch is up to date with \'origin/main\'.\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n        docs/git.md\n\nnothing added to commit but untracked files present (use "git add" to track)\n\n\n$ git add docs/git.md # starts tracking this file, note nothing is returned\n\n$ git status # let\'s check the git status of our files again                                                                                                                                                               \nOn branch main\nYour branch is up to date with \'origin/main\'.\n\nChanges to be committed:\n  (use "git restore --staged <file>..." to unstage)\n        new file:   docs/git.md\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git restore <file>..." to discard changes in working directory)\n        modified:   docs/git.md\n\n$ git commit # opens up your default editor and prompts you to enter a message for the commit\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can choose your default editor, with instructions ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/get-started/getting-started-with-git/associating-text-editors-with-git"},"here"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-COMMIT_EDITMSG"},"adding git tricks to docs\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch main\n# Your branch is up to date with 'origin/main'.\n#\n# Changes to be committed:\n#   new file:   docs/git.md\n#\n# Changes not staged for commit:\n#   modified:   docs/git.md\n#\n\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You have to enter a git commit message. If you do not enter a message, the commit will fail, and you will see:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"Aborting commit due to empty commit message.\n"))),(0,o.kt)("p",null,"Let's assume the last git commit command did not go through because no message was entered.\nWe can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"git commit -m")," to commit with a message in terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git commit -m 'adds helpful tricks for git operations'\n[main 1877fe4] adds helpful tricks for git operations\n 1 file changed, 48 insertions(+)\n create mode 100644 docs/git.md\n")),(0,o.kt)("p",null,"Then we can push to our remote repo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git push\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 10 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 353 bytes | 353.00 KiB/s, done.\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo github.com:yoyoyojoe/yoyoyojoe.github.io.git\n   1f7307a..b0fcfad  main -> main\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git push\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you're using ",(0,o.kt)("inlineCode",{parentName:"p"},"git push")," for the first time without using ",(0,o.kt)("inlineCode",{parentName:"p"},"git clone"),"; i.e., setting up your git manually using ",(0,o.kt)("inlineCode",{parentName:"p"},"git remote add <REPOSITORY_NICKNAME> <REMOTE_REPO_URL>"),", follow CLI instructions to use ",(0,o.kt)("inlineCode",{parentName:"p"},"git push --set-upstream <REPOSITORY_NICKNAME> <BRANCH_NAME>")," or use the ",(0,o.kt)("inlineCode",{parentName:"p"},"-u")," flag to set the default remote repo & branch you'd like to push type less in the future. For example: "),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ git push\nfatal: The current branch main has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin main\n\n$ git push --set-upstream origin main # does exactly the same thing as next line command\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 10 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 353 bytes | 353.00 KiB/s, done.\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo github.com:yoyoyojoe/yoyoyojoe.github.io.git\n   1f7307a..b0fcfad  main -> main\n\n$ git push -u origin main # only need to do once though\nEverything up-to-date\n\n# now you only need to enter "git push" for all future pushes\n\n'))),(0,o.kt)("h2",{id:"git-tricky"},"Git Tricky"),(0,o.kt)("p",null,"Ever wondered how you can enter single quotes or double quotes in your git commit message?"),(0,o.kt)("p",null,"Let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"git commit -a -m")," in this example. The ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--a"},(0,o.kt)("inlineCode",{parentName:"a"},"-a"))," flag tells git to automatically stage all files that have been modified or deleted, but new files you have not told Git about are not affected. The ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--mltmsggt"},(0,o.kt)("inlineCode",{parentName:"a"},"-m"))," flag tells git to use the given ",(0,o.kt)("inlineCode",{parentName:"p"},"<msg>")," as the commit message."),(0,o.kt)("p",null,"This is helpful to frequently document changes with one-line commands. Probably best to keep comments short, though."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\n# example 1\ngit commit -a -m 'adds \"git tricky\"'\n\n# example 2\n# including single quotes within double quotes within the commit message which is in single quotes \ngit commit -a -m 'per deployment warning/recommendation: \"'\"When deploying to GitHub Pages, it is better to use an explicit '\"'trailingSlash'\"' site config.\nOtherwise, GitHub Pages will add an extra trailing slash to your site urls only on direct-access (not when navigation) with a server redirect.\nThis behavior can have SEO impacts and create relative link issues.\"'\"'\n# outputs:\n# per deployment warning/recomm...\n# ...endation: \"When deploying to GitHub Pages, it is better to use an explicit 'trailingSlash' site config.\n# Otherwise, GitHub Pages will add an extra trailing slash to your site urls only on direct-access (not when navigation) with a server redirect.\n# This behavior can have SEO impacts and create relative link issues.\"\n\n# example 3\n# multi-paragraph commit message\ngit commit -a -m 'include a multi-paragraph commit message, quoting \"'\"Probably best to keep comments short, though. '\"'Wink...'\"'\"'\"' -m 'but sometimes you have to'\n# outputs:\n# include a multi-paragraph commit, quoting \"Probably best to keep comm\u2026\n# \u2026ents short, though. 'Wink...'\"\n# but sometimes you have to\n\n# example 4\n# multi-paragraph commit message, I think this looks better though\ngit commit -a -m 'include a multi-paragraph commit message,' -m 'quoting \"'\"Probably best to keep comments short, though. \"'\"' -m 'but sometimes you have to! '\"'Wink...'\"''\n# (don't mind the formatting here)\n# outputs:\n# include a multi-paragraph commit, \n# quoting \"Probably best to keep comments short, though. \"\n# but sometimes you have to! 'Wink...'\n")),(0,o.kt)("p",null,"Ref: Stack overflow ",(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/16033290/16330123"},"link")),(0,o.kt)("p",null,"Now go and git started!"),(0,o.kt)("h2",{id:"additional-resources"},"Additional Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/docs"},"git-scm"),"  ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/joshnh/Git-Commands"},"joshnh/Git-Commands"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories"},"GitHub/Repositories"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/yoyoyojoe/git-legendary-chainsaw"},"yoyoyojoe/git-legendary-chainsaw"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://www.donnfelker.com/git/"},"Master the Essentials of Git in Under 2 Hours"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/firstcontributions/first-contributions"},"First Contributions"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/how-to-sync-your-fork-with-the-original-git-repository/"},"freeCodeCamp/Sync Your Fork"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors"},"https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors")))))}c.isMDXComponent=!0}}]);