// * for wip pausing game functionality
// const paused = {
//   speed: 250,
//   status: false
// };

document.addEventListener('DOMContentLoaded', () => {
  const welcomeMessage = 'Welcome!\n'
    + 'Some keyboard shortcuts while you enjoy this game: \n'
    + 'Pressing E will set game level to Easy;\n'
    + 'pressing N will set game level to Normal;\n'
    + 'pressing Hard will set game level to Hard;\n'
    + 'pressing Enter will restart the game;'
    + 'and finally, pressing M will mute the audio!';

  console.log(welcomeMessage);

  // bgm setup
  let musicPlayer;

  async function getMusicPlayer() {
    musicPlayer = await document.querySelector('#controllersContainer > audio');
    musicPlayer.volume = 0.15;
    musicPlayer.play();

    const bgmFiles = [
      './assets/bgm/109-pewter_city_theme.mp3',
      './assets/bgm/133-celadon_city.mp3',
      './assets/bgm/107-battle_vs_wild_pokemon.mp3',
    ];

    let i = 0;

    // listen for the music ended event, to play the next audio file
    musicPlayer.addEventListener('ended', () => {
      if (i < bgmFiles.length) {
        musicPlayer.src = bgmFiles[i];
        i += 1;
        // if intro music ends, play next song
        musicPlayer.play();
        // musicPlayer.loop = true;
      } else {
        i = 0;
        musicPlayer.src = bgmFiles[i];
        i += 1;
        // if intro music ends, play next song
        musicPlayer.play();
      }
    }, false);
  }

  musicPlayer = getMusicPlayer();

  const body = document.querySelector('body');
  const board = document.querySelector('#board');

  const head = new Head(board);
  const apple = new Apple(board);

  // 'keydown' is the case-sensitive string of event type to listen for
  body.addEventListener('keydown', (e) => {
    // the KeyboardEvent is the js built-in object with several properties
    // KeyboardEvent.code represents a phsyical key on the keyboard
    // (as ooposed to the charactor generated by pressing the key)
    // KeyboardEvent.key returns the value of the key pressed by the user

    switch (e.code) {
      case 'ArrowLeft':
        if (head.currentDirection !== 'right') head.input = 'left';
        break;
      case 'ArrowRight':
        if (head.currentDirection !== 'left') head.input = 'right';
        break;
      case 'ArrowDown':
        if (head.currentDirection !== 'up') head.input = 'down';
        break;
      case 'ArrowUp':
        if (head.currentDirection !== 'down') head.input = 'up';
        break;
      // using keyboard for speed management: e = easy, n = normal, h = hard
      case 'KeyE':
        head.SPEED = 500;
        console.log('Game level set to Easy.');
        break;
      case 'KeyN':
        head.SPEED = 250;
        console.log('Game level set to Normal.');
        break;
      case 'KeyH':
        head.SPEED = 75;
        console.log('Game level set to Hard.');
        break;
      // music play / pause feature not working well
      // musicPlayer.play(); // works fine, but not working with pause()
      // musicPlayer.pause(); // not working
      // console.log('Music is not paused:', musicPlayer.pause); // logs function definition
      // custom muting function
      case 'KeyM':
        if (musicPlayer.volume === 0) {
          musicPlayer.volume = 0.15;
          console.log('Music volume turned to 0.15 here.');
        } else {
          musicPlayer.volume = 0;
          console.log('Music volume turned to 0 here.');
        }
        break;
      // reloads page when hitting 'Enter' key
      case 'Enter':
        window.location.reload();
        break;
      // todo stretch feature: pause functionality ...
      // case 'Space':
      //   console.log(head.SPEED);
      //   if (!paused.status) {
      //     paused.speed = Number(head.SPEED);
      //     paused.status = true;
      //     head.SPEED = 1000000;
      //     console.log(
      //       'paused: ',
      //       paused.status,
      //       'head.SPEED (current)',
      //       head.SPEED,
      //       'prior speed:',
      //       paused.speed,
      //       'current direction:',
      //       head.currentDirection,
      //     );
      //   } else {
      //     paused.status = false;
      //     head.SPEED = paused.speed;
      //     paused.speed = 1000000;
      //     console.log(
      //       'paused: ',
      //       paused.status,
      //       'head.SPEED (current)',
      //       head.SPEED,
      //       'prior speed:',
      //       paused.speed,
      //       'current direction:',
      //       head.currentDirection,
      //     );
      //   }
      //   break;
      default:
        // console.log(`${e.code} is not recognized`);
        break;
    }

    // same effect as switch statement above:
    // if (e.code === 'ArrowLeft' && head.currentDirection !== 'right') {
    //   head.input = 'left';
    // }
    // if (e.code === 'ArrowRight' && head.currentDirection !== 'left') {
    //   head.input = 'right';
    // }
    // if (e.code === 'ArrowDown' && head.currentDirection !== 'up') {
    //   head.input = 'down';
    // }
    // if (e.code === 'ArrowUp' && head.currentDirection !== 'down') {
    //   head.input = 'up';
    // }
  });

  const easyButton = document.createElement('button');
  easyButton.setAttribute('class', 'challengeLevel');
  easyButton.innerText = 'Easy';
  easyButton.addEventListener('click', () => {
    console.log('Game level set to Easy.');
    head.SPEED = 500;
  });

  const normalButton = document.createElement('button');
  normalButton.setAttribute('class', 'challengeLevel');
  normalButton.innerText = 'Normal';
  normalButton.addEventListener('click', () => {
    console.log('Game level set to Normal.');
    head.SPEED = 250;
  });

  const hardButton = document.createElement('button');
  normalButton.setAttribute('class', 'challengeLevel');
  hardButton.innerText = 'Hard';
  hardButton.addEventListener('click', () => {
    console.log('Game level set to Hard.');
    head.SPEED = 75;
  });

  const span = document.createElement('span');
  span.id = 'levelButtons';
  span.appendChild(easyButton);
  span.appendChild(normalButton);
  span.appendChild(hardButton);
  document.querySelector('#controllersContainer').appendChild(span);

  // if player wishes to play again, reload the page
  document.querySelector('#again').addEventListener('click', () => {
    window.location.reload();
  });

  // end of DOMContentLoaded event listener

  // todo stretch features?
  // - add a pause functionality when hitting space bar
  // - throttling seems not needed in current set up, but would be needed if this.input is removed
  // - instead of reducing chance of apple spawning where snake is, maybe rework logic? //* done!
  // - currently music plays a small number of songs, more advanced algo would be a plus
  // - add ability to turn off the music as it can get annoying :P //* done!
  // - look into error message(s):
  // Uncaught ReferenceError: time is not defined // ? but seems needed
  // at Head.gameOver(Head.js: 144: 18)
  // at Head.move(Head.js: 75: 34)
});
